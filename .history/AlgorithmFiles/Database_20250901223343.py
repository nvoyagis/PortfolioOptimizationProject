from sqlalchemy import create_engine, text
from dotenv import load_dotenv
import os
import pandas as pd
import networkx as nx

# Load credentials from .env
load_dotenv()

user = os.getenv("DB_USER")
password = os.getenv("DB_PASSWORD")
host = os.getenv("DB_HOST")
port = os.getenv("DB_PORT")
db_name = os.getenv("DB_NAME")

# Construct SQLAlchemy connection string
DATABASE_URL = f"postgresql://{user}:{password}@{host}:{port}/{db_name}"
engine = create_engine(DATABASE_URL)


def replace_spaces_with_underscores(d):
    new_dict = {}
    for k, v in d.items():
        new_dict[k.replace(' ', '_')] = v
    return new_dict


def create_dual_graph_table(dual_TMFG_info: dict, data_dict: dict):
    # NOTE: id: NumStocksInTMFG_date1_date2_date3_date4_portfolio
    # Replace spaces with underscores
    dual_TMFG_info = replace_spaces_with_underscores(dual_TMFG_info)
    with engine.begin() as conn:
        # Create title for dual TMFG
        table_title = f"stocks:{dual_TMFG_info['TMFG_size']} 1:{data_dict['d1']} 2:{data_dict['d2']} 3:{data_dict['d3']} 4:{data_dict['d4']}"
        # Create a table for portfolio information of a dual TMFG
        create_table_sql = text(f"""
        CREATE TABLE public."{table_title}" (
            id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            "portfolio" TEXT NULL,
            "betweenness" DOUBLE PRECISION,
            "closeness" DOUBLE PRECISION,
            "communicability_betweenness" DOUBLE PRECISION,
            "current_flow" DOUBLE PRECISION,
            "degree" DOUBLE PRECISION,
            "eigenvector" DOUBLE PRECISION,
            "harmonic" DOUBLE PRECISION,
            "katz" DOUBLE PRECISION,
            "load" DOUBLE PRECISION,
            "percolation" DOUBLE PRECISION,
            "pagerank" DOUBLE PRECISION,
            "second_order" DOUBLE PRECISION,
            "TMFG_vert_weight_sum" DOUBLE PRECISION,
            "TMFG_edge_weight_sum" DOUBLE PRECISION,
            "vert_weight" DOUBLE PRECISION,
            "incindent_edge_weight_sum" DOUBLE PRECISION,
            "made_from_freq_edge" DOUBLE PRECISION,
            "average_return" DOUBLE PRECISION,
            "SPX_win_percentage" DOUBLE PRECISION
        ) TABLESPACE pg_default;
        """)
        conn.execute(text(f'DROP TABLE IF EXISTS "{table_title}";'))
        conn.execute(create_table_sql)

        # Remove TMFG_Size key-pair from dual_TMFG_info (it has the only non-dict value which breaks the following code logic)
        dual_TMFG_info.pop('TMFG_size')

        # 1) Get all unique portfolios
        portfolios = list(next(iter(dual_TMFG_info.values())).keys())

        # 2) Rebuild row dictionaries
        rows = []
        for portfolio in portfolios:
            row = {'portfolio': ', '.join(portfolio)}
            for measure in dual_TMFG_info:
                row[measure] = dual_TMFG_info[measure][portfolio]
            rows.append(row)

        # 3): Write SQL statement
        columns = ', '.join(f'"{k}"' for k in rows[0].keys())
        placeholders = ', '.join(f':{k}' for k in rows[0].keys())
        query = text(f'''
            INSERT INTO "{table_title}" ({columns})
            VALUES ({placeholders})
        ''')

        # Step 4: Insert each row
        for row in rows:
            conn.execute(query, row)

        # # Prepare and execute the query
        # dict1 = dual_TMFG_info['degree']
        # for portfolio in dict1.keys():
        #     values = ', '.join(f':{d[portfolio]}' for d in dual_TMFG_info.values())
        #     query = text(f'INSERT INTO "{table_title}" ({columns}) VALUES ({values})')
        #     conn.execute(query, dual_TMFG_info)

# Convert supabase table into a dataframe
def table_into_df(table_name: str) -> pd.DataFrame:
    try:
        with engine.connect() as connection:
            df = pd.read_sql_table(table_name, con=connection)
        return df
    except Exception as e:
        print(f"Error loading table '{table_name}':", e)
        return pd.DataFrame()


def get_average(table_name: str, col_name: str):
    with engine.connect() as conn:
        query = text(f'SELECT AVG("{col_name}") AS average_value FROM "{table_name}";')
        average = conn.execute(query).fetchone()[0]
        print(f'{col_name} average: {average}')
        return average

def get_median(table_name: str, col_name: str):
    with engine.connect() as conn:
        query = text(f'''WITH ordered AS (
                                SELECT "{col_name}",
                                ROW_NUMBER() OVER (ORDER BY "{col_name}") AS rn,
                                COUNT(*) OVER () AS total_count
                                FROM "{table_name}")
                        SELECT AVG("{col_name}") AS median
                        FROM ordered
                        WHERE rn IN ((total_count + 1) / 2, (total_count + 2) / 2);''')
        median = conn.execute(query).fetchone()[0]
        print(f'{col_name} median: {median}')
        return median

def count_positives(table_name: str, col_name: str):
    with engine.connect() as conn:
        query = text(f'''
            SELECT COUNT(*) AS positive_count 
            FROM "{table_name}" 
            WHERE "{col_name}" > 0;
        ''')
        count = conn.execute(query).fetchone()[0]
        print(f'{col_name} positive count: {count}')
        return count


# get_average('stocks:60 1:2021-03-04 2:2021-10-28 3:2021-10-29 4:2021-12-17', 'average_return')
# get_average('stocks:60 1:2021-03-04 2:2021-10-28 3:2021-10-29 4:2021-12-17', 'SPX_win_percentage')
# get_median('stocks:60 1:2021-03-04 2:2021-10-28 3:2021-10-29 4:2021-12-17', 'average_return')
# get_median('stocks:60 1:2021-03-04 2:2021-10-28 3:2021-10-29 4:2021-12-17', 'SPX_win_percentage')
# print('-------------------------------------------------------------------------------------------')
# get_average('stocks:60 1:2020-12-23 2:2021-02-05 3:2021-02-08 4:2021-05-14', 'average_return')
# get_average('stocks:60 1:2020-12-23 2:2021-02-05 3:2021-02-08 4:2021-05-14', 'SPX_win_percentage')
# get_median('stocks:60 1:2020-12-23 2:2021-02-05 3:2021-02-08 4:2021-05-14', 'average_return')
# get_median('stocks:60 1:2020-12-23 2:2021-02-05 3:2021-02-08 4:2021-05-14', 'SPX_win_percentage')
# print('-------------------------------------------------------------------------------------------')
# get_average('stocks:60 1:2023-03-13 2:2023-05-26 3:2023-05-30 4:2023-07-28', 'average_return')
# get_average('stocks:60 1:2023-03-13 2:2023-05-26 3:2023-05-30 4:2023-07-28', 'SPX_win_percentage')
# get_median('stocks:60 1:2023-03-13 2:2023-05-26 3:2023-05-30 4:2023-07-28', 'average_return')
# get_median('stocks:60 1:2023-03-13 2:2023-05-26 3:2023-05-30 4:2023-07-28', 'SPX_win_percentage')
# print('-------------------------------------------------------------------------------------------')
# get_average('stocks:60 1:2023-11-14 2:2024-01-24 3:2024-01-25 4:2024-04-05', 'average_return')
# get_average('stocks:60 1:2023-11-14 2:2024-01-24 3:2024-01-25 4:2024-04-05', 'SPX_win_percentage')
# get_median('stocks:60 1:2023-11-14 2:2024-01-24 3:2024-01-25 4:2024-04-05', 'average_return')
# get_median('stocks:60 1:2023-11-14 2:2024-01-24 3:2024-01-25 4:2024-04-05', 'SPX_win_percentage')
# print('--------------------------------------------------------------------------------------------------------')

# get_average('!stocks:60 1:2021-03-04 2:2021-10-28 3:2021-10-29 4:2021-12-17', 'average_return')
# get_average('!stocks:60 1:2021-03-04 2:2021-10-28 3:2021-10-29 4:2021-12-17', 'SPX_win_percentage')
# get_median('!stocks:60 1:2021-03-04 2:2021-10-28 3:2021-10-29 4:2021-12-17', 'average_return')
# get_median('!stocks:60 1:2021-03-04 2:2021-10-28 3:2021-10-29 4:2021-12-17', 'SPX_win_percentage')
# print('-------------------------------------------------------------------------------------------')
# get_average('!stocks:60 1:2020-12-23 2:2021-02-05 3:2021-02-08 4:2021-05-14', 'average_return')
# get_average('!stocks:60 1:2020-12-23 2:2021-02-05 3:2021-02-08 4:2021-05-14', 'SPX_win_percentage')
# get_median('!stocks:60 1:2020-12-23 2:2021-02-05 3:2021-02-08 4:2021-05-14', 'average_return')
# get_median('!stocks:60 1:2020-12-23 2:2021-02-05 3:2021-02-08 4:2021-05-14', 'SPX_win_percentage')
# print('-------------------------------------------------------------------------------------------')
# get_average('!stocks:60 1:2023-03-13 2:2023-05-26 3:2023-05-30 4:2023-07-28', 'average_return')
# get_average('!stocks:60 1:2023-03-13 2:2023-05-26 3:2023-05-30 4:2023-07-28', 'SPX_win_percentage')
# get_median('!stocks:60 1:2023-03-13 2:2023-05-26 3:2023-05-30 4:2023-07-28', 'average_return')
# get_median('!stocks:60 1:2023-03-13 2:2023-05-26 3:2023-05-30 4:2023-07-28', 'SPX_win_percentage')
# print('-------------------------------------------------------------------------------------------')
# get_average('!stocks:60 1:2023-11-14 2:2024-01-24 3:2024-01-25 4:2024-04-05', 'average_return')
# get_average('!stocks:60 1:2023-11-14 2:2024-01-24 3:2024-01-25 4:2024-04-05', 'SPX_win_percentage')
# get_median('!stocks:60 1:2023-11-14 2:2024-01-24 3:2024-01-25 4:2024-04-05', 'average_return')
# get_median('!stocks:60 1:2023-11-14 2:2024-01-24 3:2024-01-25 4:2024-04-05', 'SPX_win_percentage')
# print('-------------------------------------------------------------------------------------------')






